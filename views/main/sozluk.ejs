<!DOCTYPE html>
<html lang="tr">

<head>
  <meta charset="utf-8">
  <title>Sözlük | Boltas Portal</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta content="A fully featured admin theme which can be used to build CRM, CMS, etc." name="description">
  <meta content="Coderthemes" name="author">

  <%- include("partials/css") %>

  <style>
    .dictionary-header {
        background: linear-gradient(135deg, #17a2b8 0%, #138496 100%);
        color: white;
        padding: 2rem 0;
        margin-bottom: 2rem;
        border-radius: 10px;
    }
    
    .dictionary-title {
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
    }
    
    .dictionary-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
    }
    
    /* Updated styles for tabbed interface instead of accordion */
    .alphabet-tabs {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
        overflow: hidden;
    }
    
    .tab-navigation {
        display: flex;
        flex-wrap: wrap;
        border-bottom: 2px solid #f1f3f4;
        padding: 0;
        margin: 0;
        list-style: none;
    }
    
    .tab-item {
        flex: 1;
        min-width: 50px;
        text-align: center;
    }
    
    .tab-link {
        display: block;
        padding: 1rem 0.5rem;
        color: #6c757d;
        text-decoration: none;
        font-weight: 600;
        font-size: 0.9rem;
        border-bottom: 3px solid transparent;
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .tab-link:hover {
        color: #17a2b8;
        background: #f8f9fa;
    }
    
    .tab-link.active {
        color: #17a2b8;
        border-bottom-color: #17a2b8;
        background: #f8f9fa;
    }
    
    .tab-content {
        padding: 2rem;
        min-height: 400px;
    }
    
    /* Updated to 2-column grid layout matching screenshot */
    .words-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
        margin-top: 1rem;
    }
    
    .word-item {
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        border: 1px solid #e9ecef;
    }
    
    .word-title {
        color: #333;
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 0.75rem;
        display: block;
    }
    
    .word-meaning {
        color: #666;
        line-height: 1.6;
        margin: 0;
        font-size: 0.95rem;
    }
    
    .search-container {
        background: white;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }
    
    .search-box {
        border-radius: 25px;
        padding: 0.75rem 1.5rem;
        border: 2px solid #e9ecef;
        transition: all 0.3s ease;
    }
    
    .search-box:focus {
        border-color: #17a2b8;
        box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.25);
    }
    
    .no-results {
        text-align: center;
        padding: 3rem;
        color: #6c757d;
        grid-column: 1 / -1;
    }
    
    .loading-spinner {
        display: none;
        text-align: center;
        padding: 3rem;
    }
    
    @media (max-width: 768px) {
        .tab-item {
            min-width: 40px;
        }
        
        .tab-link {
            padding: 0.75rem 0.25rem;
            font-size: 0.8rem;
        }
        
        /* Mobile responsive - single column on small screens */
        .words-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
        
        .word-item {
            padding: 1rem;
        }
    }
</style>
</head>

<body class="loading" data-layout-color="light" data-layout="topnav" data-layout-mode="fluid"
  data-rightbar-onstart="true">
  <!-- Begin page -->
  <div class="wrapper">

    <!-- ============================================================== -->
    <!-- Start Page Content here -->
    <!-- ============================================================== -->

    <div class="content-page">
        <div class="content">

            <!-- Topbar Start -->
            <%- include("partials/topbar") %>
            <!-- end Topbar -->

            <%- include("partials/topnav") %>

            <!-- Start Content-->
            <div class="container-fluid">

                <!-- Page Title -->
                <div class="row">
                    <div class="col-12">
                        <div class="page-title-box">
                            <h4 class="page-title">Sözlük</h4>
                        </div>
                    </div>
                </div>

                <!-- Arama -->
                <div class="row">
                    <div class="col-12">
                        <div class="search-container">
                            <div class="row align-items-center">
                                <div class="col-md-8">
                                    <div class="position-relative">
                                        <input type="text" class="form-control search-box" id="searchInput" 
                                               placeholder="Kelime veya anlam ara..." value="<%= search %>">
                                        <i class="mdi mdi-magnify position-absolute" style="right: 15px; top: 50%; transform: translateY(-50%); color: #6c757d;"></i>
                                    </div>
                                </div>
                                <div class="col-md-4 mt-2 mt-md-0">
                                    <select class="form-select" id="kategoriFilter">
                                        <option value="">Tüm Kategoriler</option>
                                        <% kategoriler.forEach(kategori => { %>
                                            <option value="<%= kategori %>" <%= selectedKategori === kategori ? 'selected' : '' %>><%= kategori %></option>
                                        <% }) %>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Loading Spinner -->
                <div class="row">
                    <div class="col-12">
                        <div class="loading-spinner">
                            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                                <span class="visually-hidden">Yükleniyor...</span>
                            </div>
                            <h5 class="mt-3">Kelimeler yükleniyor...</h5>
                        </div>
                    </div>
                </div>

                <!-- Replaced accordion with tabbed interface -->
                <!-- Tabbed Dictionary -->
                <div class="row">
                    <div class="col-12">
                        <div class="alphabet-tabs">
                            <!-- Tab Navigation -->
                            <ul class="tab-navigation">
                                <% 
                                const harfGruplari = {};
                                
                                // Group words by letter using the harfler array from controller
                                sozlukler.forEach(sozluk => {
                                    let harfKey = sozluk.harf;
                                    // Map special characters to combined tabs
                                    if (harfKey === 'C' || harfKey === 'Ç') harfKey = 'C-Ç';
                                    else if (harfKey === 'İ' || harfKey === 'I') harfKey = 'İ-I';
                                    else if (harfKey === 'O' || harfKey === 'Ö') harfKey = 'O-Ö';
                                    else if (harfKey === 'S' || harfKey === 'Ş') harfKey = 'S-Ş';
                                    else if (harfKey === 'U' || harfKey === 'Ü') harfKey = 'U-Ü';
                                    
                                    if (!harfGruplari[harfKey]) {
                                        harfGruplari[harfKey] = [];
                                    }
                                    harfGruplari[harfKey].push(sozluk);
                                });
                                
                                // Use harfler array from controller and apply same grouping logic
                                const mevcutHarfler = [];
                                harfler.forEach(harf => {
                                    let harfKey = harf;
                                    // Map special characters to combined tabs
                                    if (harfKey === 'C' || harfKey === 'Ç') harfKey = 'C-Ç';
                                    else if (harfKey === 'İ' || harfKey === 'I') harfKey = 'İ-I';
                                    else if (harfKey === 'O' || harfKey === 'Ö') harfKey = 'O-Ö';
                                    else if (harfKey === 'S' || harfKey === 'Ş') harfKey = 'S-Ş';
                                    else if (harfKey === 'U' || harfKey === 'Ü') harfKey = 'U-Ü';
                                    
                                    if (!mevcutHarfler.includes(harfKey)) {
                                        mevcutHarfler.push(harfKey);
                                    }
                                });
                                
                                // Sort the letters properly
                                const turkishAlphabet = ['A', 'B', 'C-Ç', 'D', 'E', 'F', 'G', 'H', 'İ-I', 'J', 'K', 'L', 'M', 'N', 'O-Ö', 'P', 'R', 'S-Ş', 'T', 'U-Ü', 'V', 'Y', 'Z'];
                                mevcutHarfler.sort((a, b) => {
                                    const aIndex = turkishAlphabet.indexOf(a);
                                    const bIndex = turkishAlphabet.indexOf(b);
                                    if (aIndex === -1 && bIndex === -1) return a.localeCompare(b, 'tr');
                                    if (aIndex === -1) return 1;
                                    if (bIndex === -1) return -1;
                                    return aIndex - bIndex;
                                });
                                %>
                                
                                <% mevcutHarfler.forEach((harf, index) => { %>
                                    <li class="tab-item">
                                        <a class="tab-link <%= index === 0 ? 'active' : '' %>" 
                                           data-tab="<%= harf %>" 
                                           href="#tab-<%= harf.replace('-', '') %>">
                                            <%= harf %>
                                        </a>
                                    </li>
                                <% }) %>
                            </ul>
                            
                            <!-- Tab Content -->
                            <div class="tab-content" id="dictionaryContent">
                                <% mevcutHarfler.forEach((harf, index) => { %>
                                    <div class="tab-pane <%= index === 0 ? 'active' : '' %>" id="tab-<%= harf.replace('-', '') %>">
                                        <% if (harfGruplari[harf] && harfGruplari[harf].length > 0) { %>
                                            <!-- Updated to use grid layout with 2 columns -->
                                            <div class="words-grid">
                                                <% harfGruplari[harf].forEach(sozluk => { %>
                                                    <div class="word-item">
                                                        <strong class="word-title"><%= sozluk.kelime %>:</strong>
                                                        <div class="word-meaning"><%- sozluk.anlam %></div>
                                                    </div>
                                                <% }) %>
                                            </div>
                                        <% } else { %>
                                            <div class="no-results">
                                                <i class="mdi mdi-book-open-page-variant" style="font-size: 3rem; color: #e9ecef;"></i>
                                                <h5 class="mt-3"><%= harf %> harfi ile başlayan kelime bulunamadı</h5>
                                            </div>
                                        <% } %>
                                    </div>
                                <% }) %>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            <!-- container -->

        </div>
        <!-- content -->

        <!-- Footer Start -->
        <%- include("partials/footer") %>
        <!-- end Footer -->

    </div>

      <!-- ============================================================== -->
      <!-- End Page content -->
      <!-- ============================================================== -->

    </div>
    <!-- END wrapper -->

    <%- include("partials/scripts") %>
    <!-- Added harfler array to JavaScript scope -->
    <script>
        // Make harfler array available to JavaScript
        const harfler = <%- JSON.stringify(harfler) %>;
    </script>
    <script>
        $(document).ready(function() {
            // Tab switching
            $('.tab-link').on('click', function(e) {
                e.preventDefault();
                
                const targetTab = $(this).data('tab');
                
                // Remove active class from all tabs and content
                $('.tab-link').removeClass('active');
                $('.tab-pane').removeClass('active');
                
                // Add active class to clicked tab and corresponding content
                $(this).addClass('active');
                $('#tab-' + targetTab.replace('-', '')).addClass('active');
            });
            
            // Search functionality
            function performSearch() {
                const search = $('#searchInput').val();
                const kategori = $('#kategoriFilter').val();
                
                $('.loading-spinner').show();
                $('.alphabet-tabs').hide();
                
                $.ajax({
                    url: '/sozluk/search',
                    method: 'GET',
                    data: { search, kategori },
                    success: function(response) {
                        if (response.success) {
                            displayTabbedResults(response.data);
                        } else {
                            showNoResults();
                        }
                    },
                    error: function() {
                        showError();
                    },
                    complete: function() {
                        $('.loading-spinner').hide();
                        $('.alphabet-tabs').show();
                    }
                });
            }
            
            // Display search results in tabbed format
            function displayTabbedResults(words) {
                // Group words by letter
                const harfGruplari = {};
                
                words.forEach(word => {
                    let harfKey = word.harf;
                    // Map special characters to combined tabs
                    if (harfKey === 'C' || harfKey === 'Ç') harfKey = 'C-Ç';
                    else if (harfKey === 'İ' || harfKey === 'I') harfKey = 'İ-I';
                    else if (harfKey === 'O' || harfKey === 'Ö') harfKey = 'O-Ö';
                    else if (harfKey === 'S' || harfKey === 'Ş') harfKey = 'S-Ş';
                    else if (harfKey === 'U' || harfKey === 'Ü') harfKey = 'U-Ü';
                    
                    if (!harfGruplari[harfKey]) {
                        harfGruplari[harfKey] = [];
                    }
                    harfGruplari[harfKey].push(word);
                });
                
                const mevcutHarfler = [];
                harfler.forEach(harf => {
                    let harfKey = harf;
                    // Map special characters to combined tabs
                    if (harfKey === 'C' || harfKey === 'Ç') harfKey = 'C-Ç';
                    else if (harfKey === 'İ' || harfKey === 'I') harfKey = 'İ-I';
                    else if (harfKey === 'O' || harfKey === 'Ö') harfKey = 'O-Ö';
                    else if (harfKey === 'S' || harfKey === 'Ş') harfKey = 'S-Ş';
                    else if (harfKey === 'U' || harfKey === 'Ü') harfKey = 'U-Ü';
                    
                    if (!mevcutHarfler.includes(harfKey)) {
                        mevcutHarfler.push(harfKey);
                    }
                });
                
                // Sort the letters properly
                const turkishAlphabet = ['A', 'B', 'C-Ç', 'D', 'E', 'F', 'G', 'H', 'İ-I', 'J', 'K', 'L', 'M', 'N', 'O-Ö', 'P', 'R', 'S-Ş', 'T', 'U-Ü', 'V', 'Y', 'Z'];
                mevcutHarfler.sort((a, b) => {
                    const aIndex = turkishAlphabet.indexOf(a);
                    const bIndex = turkishAlphabet.indexOf(b);
                    if (aIndex === -1 && bIndex === -1) return a.localeCompare(b, 'tr');
                    if (aIndex === -1) return 1;
                    if (bIndex === -1) return -1;
                    return aIndex - bIndex;
                });
                
                // Rebuild tab navigation
                let tabNavHtml = '';
                mevcutHarfler.forEach((harf, index) => {
                    tabNavHtml += `
                        <li class="tab-item">
                            <a class="tab-link ${index === 0 ? 'active' : ''}" 
                               data-tab="${harf}" 
                               href="#tab-${harf.replace('-', '')}">
                                ${harf}
                            </a>
                        </li>
                    `;
                });
                $('.tab-navigation').html(tabNavHtml);
                
                // Update tab content
                let contentHtml = '';
                mevcutHarfler.forEach((harf, index) => {
                    contentHtml += `<div class="tab-pane ${index === 0 ? 'active' : ''}" id="tab-${harf.replace('-', '')}">`;
                    
                    if (harfGruplari[harf] && harfGruplari[harf].length > 0) {
                        contentHtml += '<div class="words-grid">';
                        harfGruplari[harf].forEach(word => {
                            contentHtml += `
                                <div class="word-item">
                                    <strong class="word-title">${word.kelime}:</strong>
                                    <div class="word-meaning">${word.anlam}</div>
                                </div>
                            `;
                        });
                        contentHtml += '</div>';
                    } else {
                        contentHtml += `
                            <div class="no-results">
                                <i class="mdi mdi-book-open-page-variant" style="font-size: 3rem; color: #e9ecef;"></i>
                                <h5 class="mt-3">${harf} harfi ile başlayan kelime bulunamadı</h5>
                            </div>
                        `;
                    }
                    
                    contentHtml += '</div>';
                });
                
                $('#dictionaryContent').html(contentHtml);
                
                // Reattach tab click events
                $('.tab-link').on('click', function(e) {
                    e.preventDefault();
                    
                    const targetTab = $(this).data('tab');
                    
                    $('.tab-link').removeClass('active');
                    $('.tab-pane').removeClass('active');
                    
                    $(this).addClass('active');
                    $('#tab-' + targetTab.replace('-', '')).addClass('active');
                });
            }
            
            // Show no results
            function showNoResults() {
                $('#dictionaryContent').html(`
                    <div class="no-results">
                        <i class="mdi mdi-book-open-page-variant" style="font-size: 4rem; color: #e9ecef;"></i>
                        <h4 class="mt-3">Kelime bulunamadı</h4>
                        <p class="mb-0">Arama kriterlerinizi değiştirerek tekrar deneyin.</p>
                    </div>
                `);
            }
            
            // Show error
            function showError() {
                $('#dictionaryContent').html(`
                    <div class="no-results">
                        <i class="mdi mdi-alert-circle" style="font-size: 4rem; color: #e9ecef;"></i>
                        <h4 class="mt-3">Bir hata oluştu</h4>
                        <p class="mb-0">Lütfen daha sonra tekrar deneyin.</p>
                    </div>
                `);
            }
            
            // Category filter change
            $('#kategoriFilter').on('change', performSearch);
            
            // Real-time search with debounce
            let searchTimeout;
            $('#searchInput').on('input', function() {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(performSearch, 500);
            });
            
            // Enter key search
            $('#searchInput').on('keypress', function(e) {
                if (e.which === 13) {
                    performSearch();
                }
            });
        });
    </script>

</body>
</html>
